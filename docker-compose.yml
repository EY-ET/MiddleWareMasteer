version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    # Do not expose ports directly - access through Nginx proxy only
    environment:
      - NODE_ENV=production
      - PORT=5000
      - HOST=0.0.0.0
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres:5432/tiktok_middleware}
      # TikTok API
      - TIKTOK_CLIENT_ID=${TIKTOK_CLIENT_ID}
      - TIKTOK_CLIENT_SECRET=${TIKTOK_CLIENT_SECRET}
      - TIKTOK_REDIRECT_URI=${TIKTOK_REDIRECT_URI:-http://localhost:5000/auth/tiktok/callback}
      - TIKTOK_APP_ID=${TIKTOK_APP_ID}
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      # File upload
      - MAX_FILE_SIZE_MB=60
      - MAX_FILES_PER_REQUEST=10
      # Rate limiting
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FILE_ENABLED=true
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    mem_limit: 1G
    cpus: 1.0
    mem_reservation: 512M

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tiktok_middleware
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d tiktok_middleware"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    mem_limit: 512M
    cpus: 0.5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $$REDIS_PASSWORD ping | grep PONG"]
      interval: 10s
      timeout: 3s
      retries: 5
    mem_limit: 256M
    cpus: 0.25

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - app
    mem_limit: 128M
    cpus: 0.25

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16